{"ast":null,"code":"var _jsxFileName = \"/Users/tarannumnowshin/Downloads/ecommerce_project/ecommerce-frontend/src/context/CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Create a Context for Cart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// CartProvider component to wrap your app and provide cart state to the entire app\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cart, setCart] = useState([]);\n\n  // Function to add item to cart\n  const addToCart = product => {\n    setCart(prevCart => [...prevCart, product]);\n  };\n\n  // Function to get total price of the items in the cart\n  const getTotalPrice = () => {\n    return cart.reduce((total, product) => total + product.price, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      getTotalPrice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use cart context\n_s(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","addToCart","product","prevCart","getTotalPrice","reduce","total","price","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["/Users/tarannumnowshin/Downloads/ecommerce_project/ecommerce-frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\n\n// Create a Context for Cart\nconst CartContext = createContext();\n\n// CartProvider component to wrap your app and provide cart state to the entire app\nexport const CartProvider = ({ children }) => {\n  const [cart, setCart] = useState([]);\n\n  // Function to add item to cart\n  const addToCart = (product) => {\n    setCart((prevCart) => [...prevCart, product]);\n  };\n\n  // Function to get total price of the items in the cart\n  const getTotalPrice = () => {\n    return cart.reduce((total, product) => total + product.price, 0);\n  };\n\n  return (\n    <CartContext.Provider value={{ cart, addToCart, getTotalPrice }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\n// Custom hook to use cart context\nexport const useCart = () => useContext(CartContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMS,SAAS,GAAIC,OAAO,IAAK;IAC7BF,OAAO,CAAEG,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAED,OAAO,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1B,OAAOL,IAAI,CAACM,MAAM,CAAC,CAACC,KAAK,EAAEJ,OAAO,KAAKI,KAAK,GAAGJ,OAAO,CAACK,KAAK,EAAE,CAAC,CAAC;EAClE,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEV,IAAI;MAAEE,SAAS;MAAEG;IAAc,CAAE;IAAAP,QAAA,EAC7DA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAf,EAAA,CApBaF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AAqBzB,OAAO,MAAMmB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzB,UAAU,CAACI,WAAW,CAAC;AAAA;AAACqB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}